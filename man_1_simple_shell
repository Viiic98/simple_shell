.TH _SIMPLE_SHELL 1 "22 Nov 2019" "Holberton School Cohort 10" "User Commands"
.SH NAME
_simple_shell
.SH SYNOPSIS
.DS

\fBLIBRARIES\fP

\fB#include <unistd.h>\fP

\fB#include <sys/types.h>\fP

\fB#include <sys/stat.h>\fP

\fB#include <fcntl.h>\fP

\fB#include <dirent.h>\fP

\fB#include <stdlib.h>\fP

\fB#include <stdio.h>\fP

\fB#include <signal.h>\fP

\fB#include <errno.h>\fP

\fB#include <string.h>\fP

\fB#include <sys/wait.h>\fP

\fB#include <sys/time.h>\fP

\fB#include <sys/resource.h>\fP

\fB#include <string.h>\fP

\fBMACROS\fP

\fB#define DELIM "|\n"\fP

\fB#define SIZE_BUF 1024\fP

\fBPRINCIPAL FUNCTIONS\fP

\fBvoid *line(char *);\fP

\fBint exe_file(char *, char **, char **);\fP

\fBint exe_command(char *, char **, char **);\fP

\fBint _env(char **);\fP

\fBint _cd(char **, char **, int);\fP

\fBint path(char *, char **, char **);\fP

\fBOTHER FUNCTIONS\fP

\fBint pipes(char*, char**, int);\fP

\fBint ourcommands(char**, char**, int);\fP

\fBint _strlen(char *);\fP

\fBvoid print(char *);\fP

\fBvoid printerr(char *, int, char *, char *);\fP

\fBvoid *alloc_1(char *, char *);\fP

\fBchar **alloc_2(char **, char *, char*);\fP

\fBvoid _free(char **);\fP

\fBchar *_strcpy(char *, char *);\fP

\fBint _strcmp(char *, char *);\fP

\fBint _strncmp(char *, char *, int);\fP

\fBchar *_strcat(char *, char *);\fP

\fBchar *_get_cwd(void);\fP

\fBchar *_get_home(char **);\fP

\fBchar *_get_oldpwd(char **);\fP

\fBvoid _catch(int);\fP

\fBint ferr(char *);\fP

\fBchar *_itoa(int, char *);\fP

\fBvoid *verify(char *);\fP

\fBint _atoi(int, char *);\fP

\fBint veri_buf(char *);\fP

\fBvoid _exit_arg(char *);\fP

.PP
\fB
.DE
.SH DESCRIPTION
The \fBSimple Shell\fP is a project to understand the behavior of the Real Shell starting with the input data of the user and the error handles until the creation of functions like env and the calling of built-ins like pwd with the PATH and the command execve. 

The steps in the process when you type a command are:

1. Decide to type a command in interactive or non-interactive mode.

2. If you decide an interactive mode, you must run the compilated file with the statement "./compilatedfilename"

3. If you decide an non-interactive mode, you must run the compilated file with your command.

Example : echo "/bin/ls" | ./hsh

4. The Simple Shell evaluates the access mode (interactive or non-interactive) with the command isatty, which returns the value 1 if you use the interactive mode and other value if you use the non-interactive mode.

5. If you use interactive mode, the Simple Shell prints the prompt "#cisfun$ ".

6. If you use non-interactive mode, the Simple Shell doesnt print the prompt "#cisfun$ ".

7. The Simple Shell reads the commands with the command getline in a buffer as a single line.

8. The Simple Shell counts all the characters of the line of the command getline what aren´t space, tab or new line.

9. If the buffer has the string "exit" with new line ("exit\n"), the Simple Shell frees buffer memory and exit(0);

10. If the buffer in the first position is different to '\n' or new line, the Simple Shell pass the environment variables, the buffer and the number of the counter of command lines for the shell (in other words, every command is accounted), to the function pipes, which will have a return value called status that is displayed with the command "echo $?".

11. The function pipes separates in tokens all the buffer every time the character in the buffer was '|' or '\n'. A token is all the characters between the delimitators. For this action, the Simple Shell must allocate memory with a size of 1024. The return of this function is a pointer of strings.

12. The pointer of strings is passed to the function ourcommands with the environment variables and the counter of the command line.

13. The function ourcommands separates in parts all the pointer of strings when the character was ' \ ', ' " ', ' ' ', '\t' or '\n' in a new pointer of strings as also a simple pointer to the first argument that will be the command.The Simple Shell allocates memory for that purpose with the functions alloc1 and alloc2.

14. The Simple evaluates the simple pointer (the command) and compares if the the command is "env", "cd" or if it´s other different command than "env" or "cd". For every case, the Simple Shell redirects to every specif function.

15. If the pointer is "env", the Simple Shell uses the function _env to print all the environment variables in the screen.

16. If the pointer is "cd", the Simple Shell uses the function _cd. This function changes to the directory that the user defines and sets the environment variables OLDPWD and PWD. The variable OLDPWD is the last directory where the user was and PWD is the current directory where the user is. If the command "cd" has a second argument, it must be evaluated too. If the second argument is "..", the Simple Shell must change to the parent directory; if the second argument is "-", the Simple Shell must change to the previous directory that the user was; if the second argument is a path to a directory, the Simple Shell must change to this path if it´s a directory; if there is not a second argument, the Simple Shell must change directory to "home" directory and in this case must take the environment variable "HOME" and uses this path. If the command is different to "cd" or "env", the Simple Shell uses the function "path".

17. The function path gets the command, the tokens and the environment variables. First, the Simple Shell analyzes tif the path is of type directory and it´s, the Simple Shell returns the value 126. To do that, the Simple Shell uses the function stat that returns information about a file. If the command is really a command, the Simple Shell creates a child process and executes this command while the command exist. To prove this, the Simple Shell must take the variable PATH, and separate every intern path, concatenates the command and finds if this file exist in all the paths. If the command is really a path, for example, /bin/ls, the Simple Shell must prove that path exist and create a child process and executes this binary file.

18. When the child process ends, it returns to the parent process which it´s waiting for the value return of the child process. For this process, the Simple Shell uses the command "fork" to create a child process and "wait" to define the point of return of the child process.

19. At the end, all the functions returns a value or finishes with the command "exit".

18.  


.PP
.RS -4
\fBRETURN VALUE\fP
.RE
Upon successful return, this function return the output according the input of the user.
.PP
If exists an error, some messages are displayed for the user.
.PP
.RS -4
\fBCOMMANDS\fP
.RE

\fBCOMMAND\fP

\fBls\fP 

\fBDescription\fP

\fBThe command ls lists all the files and directories in the path that the user selects in the entry data.\fP

\fBSome Flags\fP

\fBl : Display long format like Unix file type, permissions, number of hard links, owner, group, size, last-modified date and filename.\fP

\fBa : Display all files even hidden or files starting with ".".\fP

\fBt : Sort the list by modification time\fP

\fB1 : Display all the files and directories line by line-1 : Display all the files and directories line by line

\fBExamples\fP

\fBls -lat\fP

\fBls -1\fP

\fBCOMMAND\fP

\fBcd\fP

\fBDescription\fP

\fBThe command cd allows to change from the actual directory to other one. If you put only the command, it redirects to the home directory.\fP

\fBSome Flags\fP

\fB~ : Display the files and directories of the home directory.\fP

\fB. : Display the files and directories of the current directory.\fP

\fB.. : Display the files and directories of the parent directory.\fP

\fB- : Display the files and directories of the variable OLDPWD or previous directory.\fP

\fBExamples\fP

\fBcd ~\fP

\fBcd folder_current_directory\fP

\fBcd -\fP

\fBCOMMAND\fP

\fBcp\fP

\fBDescription\fP

\fBThe command cp allows to copy files to a path and gives them a name or rewrite an existing file.\fP

\fBSome Flags\fP

\fBR or r : copy directories recursively.\fP

\fBp : copy the file and preserve metadata like time of last data modification and time of the last access.\fP

\fBExamples\fP

\fBcp file1 file2 ../parentdirectory\fP

\fBcp file1 file2\fP

\fBCOMMAND\fP

\fBpwd\fP

\fBDescription\fP

\fBThe command pwd allows to display the path of the current directory.\fP

\fBExample\fP

\fBpwd\fP

\fBCOMMAND\fP

\fBecho\fP

\fBDescription\fP

\fBThe command echo allows to display the argument that the user types after the first argument.The command echo allows to display the argument that the user types after the first argument.\fP

\fBExample\fP

\fBecho "Hola"\fP

\fBCOMMAND\fP

\fBenv\fP

\fBDescription\fP

\fBThe command env allows to display all the environment variables of the system.\fP

\fBExample\fP

\fBenv\fP

\fBCOMMAND\fP

\fBrm\fP

\fBDescription\fP

\fBThe command rm allows to delete all the files or directories that the user is available.The command rm allows to delete all the files or directories that the user is available.\fP

\fBSome Flags\fP

\fBr : Remove directories and its contents\fP

\fBi : Ask for every deletion\fP

\fBf : Force every deletion without asking\fP

\fBExamples\fP

\fBrm -rf directory_with_files\fP

\fBrm file1\fP

\fBrm file1 file2 file3\fP

\fBCOMMAND\fP

\fBexit\fP

\fBDescription\fP

\fBThe command exit allows to finish the execution of the Simple Shell. If the exit in the function has an argument, which must be an integer, the command must finish the program and then return to the normal shell and the value of "echo $?" must be an integer between 0 and 255. If the value of exit status is greater than 255, it must divide the value in 256 and get the integer value of the division, multiply by 256 and this value must be substracted from the status value.\fP

\fBExample\fP

\fBexit\fP

\fBexit 98\fP

\fBexit 300\fP

\fB**SHELL MODES**\fP

\fBINTERACTIVE MODE\fP

\fBThe interactive mode is the way that the shell receives the commands in first plain. First, you have to run the compilated file and then type the command line.\fP

\fBNON-INTERACTIVE\fP

\fBThe non-interactive mode is the way that the shell receives the commands in second plain. Directly, you have to type the command that you want to execute, the character pipe "|" and then the name of the compilated file of the simple shell.\fP

.DE

.SH AUTHOR
Written by Victor Arteaga & Orlando Gomez.

.SH BUGS
No known bugs.

.SH SEE ALSO
.I sh(1)
